#  -*- Mode: rpm-spec; indent-tabs-mode: nil -*- */
#  SPDX-License-Identifier: LGPL-2.1+
#
#  This file is part of systemd.
#  Copyright Â© 2018 Neal Gompa

# The contents of this are an example to be copied into systemd.spec.
#
# Minimum rpm version supported: 4.13.0

%transfiletriggerin -P 900900 -p <lua> -- @systemunitdir@ /etc/systemd/system
-- This script will run after any package is initially installed or
-- upgraded. We care about the case where a package is initially
-- installed, because other cases are covered by the *un scriptlets,
-- so sometimes we will reload needlessly.

if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/systemctl", "daemon-reload"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerun -p <lua> -- @systemunitdir@ /etc/systemd/system
-- On removal, we need to run daemon-reload after any units have been
-- removed. %transfiletriggerpostun would be ideal, but it does not get
-- executed for some reason.
-- On upgrade, we need to run daemon-reload after any new unit files
-- have been installed, but before %postun scripts in packages get
-- executed. %transfiletriggerun gets the right list of files
-- but it is invoked too early (before changes happen).
-- %filetriggerpostun happens at the right time, but it fires for
-- every package.
-- To execute the reload at the right time, we create a state
-- file in %transfiletriggerun and execute the daemon-reload in
-- the first %filetriggerpostun.

if posix.access("/run/systemd/system") then
    posix.mkdir("%{_localstatedir}/lib")
    posix.mkdir("%{_localstatedir}/lib/rpm-state")
    posix.mkdir("%{_localstatedir}/lib/rpm-state/systemd")
    io.open("%{_localstatedir}/lib/rpm-state/systemd/needs-reload", "w")
end

%filetriggerpostun -P 1000100 -p <lua> -- @systemunitdir@ /etc/systemd/system
if posix.access("%{_localstatedir}/lib/rpm-state/systemd/needs-reload") then
    posix.unlink("%{_localstatedir}/lib/rpm-state/systemd/needs-reload")
    posix.rmdir("%{_localstatedir}/lib/rpm-state/systemd")
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/systemctl", "daemon-reload"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -P 100700 -p <lua> -- @sysusersdir@
-- This script will process files installed in @sysusersdir@ to create
-- specified users automatically. The priority is set such that it
-- will run before the tmpfiles file trigger.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/systemd-sysusers"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -P 100500 -p <lua> -- @tmpfilesdir@
-- This script will process files installed in @tmpfilesdir@ to create
-- tmpfiles automatically. The priority is set such that it will run
-- after the sysusers file trigger, but before any other triggers.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/systemd-tmpfiles", "--create"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -p <lua> -- @udevhwdbdir@
-- This script will automatically invoke hwdb update if files have been
-- installed or updated in @udevhwdbdir@.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/systemd-hwdb", "update"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -p <lua> -- @catalogdir@
-- This script will automatically invoke journal catalog update if files
-- have been installed or updated in @catalogdir@.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/journalctl", "--update-catalog"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -p <lua> -- @udevrulesdir@
-- This script will automatically update udev with new rules if files
-- have been installed or updated in @udevrulesdir@.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("%{_bindir}/udevadm", "control", "--reload"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -p <lua> -- @sysctldir@
-- This script will automatically apply sysctl rules if files have been
-- installed or updated in @sysctldir@.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("@rootlibexecdir@/systemd-sysctl"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end

%transfiletriggerin -p <lua> -- @binfmtdir@
-- This script will automatically apply binfmt rules if files have been
-- installed or updated in @binfmtdir@.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
        assert(posix.exec("@rootlibexecdir@/systemd-binfmt"))
    elseif pid > 0 then
        posix.wait(pid)
    end
end
